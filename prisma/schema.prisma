generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String                  @id @default(cuid())
  name              String?
  email             String?                 @unique
  image             String?
  role              String                  @default("user")
  preferredRegion   Region                  @default(FR)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime                @updatedAt
  emailVerified     Boolean                 @default(false)
  accounts          Account[]
  gameReviews       GameReview[]
  sessions          Session[]
  collectionStats   UserCollectionStats?
  consoleCollection UserConsoleCollection[]
  gameCollection    UserGameCollection[]
  wishlist          UserWishlist[]

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  scope                 String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  accessToken           String?
  accessTokenExpiresAt  DateTime?
  accountId             String
  idToken               String?
  password              String?
  providerId            String
  refreshToken          String?
  refreshTokenExpiresAt DateTime?
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  ipAddress String?
  token     String   @unique
  userAgent String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Console {
  id                    String                  @id @default(cuid())
  slug                  String                  @unique
  name                  String
  manufacturer          String
  releaseYear           Int?
  description           String
  cpu                   String?
  memory                String?
  graphics              String?
  screenscrapeId        Int?                    @unique
  aiEnhancedDescription String?
  historicalContext     String?
  technicalAnalysis     String?
  culturalImpact        String?
  editorialContent      String?
  editorialTitle        String?
  editorialAuthor       String?
  editorialPublishedAt  DateTime?
  // Nouveaux champs optionnels
  generationId          String?
  unitsSold             Int?
  bestSellingGameId     String?
  dimensions            String?
  media                 String?                 // Type de m√©dia (cartridge, CD, etc.)
  coProcessor           String?
  audioChip             String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  medias                ConsoleMedia[]
  regionalNames         ConsoleRegionalName[]
  regionalDates         ConsoleRegionalDate[]
  variants              ConsoleVariant[]
  games                 Game[]
  userCollections       UserConsoleCollection[]
  wishlistItems         UserWishlist[]
  // Nouvelles relations
  generation            Generation?             @relation("ConsoleGeneration", fields: [generationId], references: [id])
  bestSellingGame       Game?                   @relation("BestSellingGame", fields: [bestSellingGameId], references: [id])

  @@map("consoles")
}

model ConsoleMedia {
  id        String   @id @default(cuid())
  consoleId String
  type      String
  region    String
  url       String
  localPath String
  format    String
  fileName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  console   Console  @relation(fields: [consoleId], references: [id], onDelete: Cascade)

  @@map("console_medias")
}

model ConsoleRegionalName {
  id        String   @id @default(cuid())
  consoleId String
  region    Region
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  console   Console  @relation(fields: [consoleId], references: [id], onDelete: Cascade)

  @@unique([consoleId, region])
  @@map("console_regional_names")
}

model ConsoleRegionalDate {
  id          String    @id @default(cuid())
  consoleId   String
  region      Region
  releaseDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  console     Console   @relation(fields: [consoleId], references: [id], onDelete: Cascade)

  @@unique([consoleId, region])
  @@map("console_regional_dates")
}

model ConsoleVariant {
  id              String                  @id @default(cuid())
  consoleId       String
  name            String
  region          Region
  releaseDate     DateTime?
  image           String?
  rarity          String?
  averagePrice    Float?
  priceUpdatedAt  DateTime?
  console         Console                 @relation(fields: [consoleId], references: [id], onDelete: Cascade)
  userCollections UserConsoleCollection[]

  @@map("console_variants")
}

model Game {
  id                     String               @id @default(cuid())
  slug                   String               
  title                  String
  consoleId              String
  releaseYear            Int?
  genreId                Int?                 // ID du genre principal depuis Screenscraper
  developer              String?
  publisher              String?
  description            String?
  screenshots            String[]
  rating                 Float?               @default(0)
  screenscrapeId         Int?
  developerId            String?
  publisherId            String?
  isClone                Boolean              @default(false)
  cloneOfId              Int?
  aiEnhancedDescription  String?
  gameplayAnalysis       String?
  historicalSignificance String?
  developmentStory       String?
  legacyImpact           String?
  playerCount            String?
  releaseDateEU          DateTime?
  releaseDateFR          DateTime?
  releaseDateJP          DateTime?
  releaseDateUS          DateTime?
  releaseDateWOR         DateTime?
  resolution             String?
  rotation               String?
  topStaff               Boolean              @default(false)
  // Nouveaux champs optionnels
  corporationDevId       String?              // ID de Corporation au lieu de developerId String
  corporationPubId       String?              // ID de Corporation au lieu de publisherId String
  familyId               String?              // ID de Family
  sizeMB                 Float?               // Taille du jeu
  onlinePlay             Boolean              @default(false)
  cloneOf                String?              // ID du jeu original si c'est un clone
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  genres                 GameGenre[]
  medias                 GameMedia[]
  regionalTitles         GameRegionalTitle[]
  reviews                GameReview[]
  variants               GameVariant[]
  console                Console              @relation(fields: [consoleId], references: [id], onDelete: Cascade)
  genre                  Genre?               @relation("PrimaryGenre", fields: [genreId], references: [screenscrapeId])
  roms                   Rom[]
  userCollections        UserGameCollection[]
  wishlistItems          UserWishlist[]
  // Nouvelles relations
  corporationDev         Corporation?         @relation("DeveloperGames", fields: [corporationDevId], references: [id])
  corporationPub         Corporation?         @relation("PublisherGames", fields: [corporationPubId], references: [id])
  family                 Family?              @relation("GameFamilies", fields: [familyId], references: [id])
  manuals                Manual[]
  videos                 Video[]
  bestSellingConsoles    Console[]            @relation("BestSellingGame")

  @@unique([slug, consoleId])
  @@index([familyId])
  @@index([corporationDevId])
  @@index([corporationPubId])
  @@index([genreId])
  @@map("games")
}

model Rom {
  id            String    @id @default(cuid())
  gameId        String
  region        Region
  version       String?
  language      String?
  isBestVersion Boolean   @default(false)
  isBeta        Boolean   @default(false)
  isDemo        Boolean   @default(false)
  isHacked      Boolean   @default(false)
  isTranslated  Boolean   @default(false)
  isUnlicensed  Boolean   @default(false)
  isAlternative Boolean   @default(false)
  archiveOrgUrl String?
  myrientUrl    String?
  fileName      String?
  fileSize      Int?
  crc32         String?
  md5           String?
  sha1          String?
  quality       String?
  priority      Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  verifiedAt    DateTime?
  game          Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, region, version])
  @@map("roms")
}

model GameVariant {
  id              String               @id @default(cuid())
  gameId          String
  name            String
  region          Region
  releaseDate     DateTime?
  image           String?
  rarity          String?
  specialEdition  Boolean              @default(false)
  limitedEdition  Boolean              @default(false)
  playerChoice    Boolean              @default(false)
  platinumHits    Boolean              @default(false)
  averagePrice    Float?
  priceUpdatedAt  DateTime?
  game            Game                 @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userCollections UserGameCollection[]

  @@map("game_variants")
}

model GameGenre {
  id            String   @id @default(cuid())
  gameId        String
  genreId       Int      // ID Screenscraper du genre
  genreName     String
  genreNameEn   String?
  isPrimary     Boolean  @default(false)
  parentGenreId Int?
  createdAt     DateTime @default(now())
  
  // Relations
  game          Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  genre         Genre?   @relation("GenreRelation", fields: [genreId], references: [screenscrapeId])

  @@unique([gameId, genreId])
  @@map("game_genres")
}

model GameMedia {
  id                String   @id @default(cuid())
  gameId            String
  mediaType         String
  region            String
  format            String
  url               String
  localPath         String?
  fileName          String
  parent            String?
  crc               String?
  md5               String?
  sha1              String?
  size              String?
  width             Int?
  height            Int?
  fileSize          Int?
  isTexture         Boolean  @default(false)
  is2D              Boolean  @default(true)
  supportNumber     Int?
  pageNumber        Int?
  downloadAttempted Boolean  @default(false)
  downloadSuccess   Boolean  @default(false)
  downloadError     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  game              Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, mediaType, region, supportNumber, pageNumber])
  @@map("game_medias")
}

model GameRegionalTitle {
  id        String   @id @default(cuid())
  gameId    String
  region    Region
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@unique([gameId, region])
  @@map("game_regional_titles")
}

model UserConsoleCollection {
  id               String           @id @default(cuid())
  userId           String
  consoleId        String?
  consoleVariantId String?
  status           CollectionStatus @default(OWNED)
  condition        ItemCondition?
  purchaseDate     DateTime?
  purchasePrice    Float?
  currentValue     Float?
  notes            String?
  isComplete       Boolean          @default(false)
  hasBox           Boolean          @default(false)
  hasManual        Boolean          @default(false)
  hasCables        Boolean          @default(false)
  hasControllers   Boolean          @default(false)
  controllersCount Int              @default(0)
  addedAt          DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  console          Console?         @relation(fields: [consoleId], references: [id], onDelete: Cascade)
  variant          ConsoleVariant?  @relation(fields: [consoleVariantId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_console_collections")
}

model UserGameCollection {
  id            String           @id @default(cuid())
  userId        String
  gameId        String?
  gameVariantId String?
  status        CollectionStatus @default(OWNED)
  condition     ItemCondition?
  purchaseDate  DateTime?
  purchasePrice Float?
  currentValue  Float?
  notes         String?
  isComplete    Boolean          @default(false)
  hasBox        Boolean          @default(false)
  hasManual     Boolean          @default(false)
  hasMap        Boolean          @default(false)
  isCompleted   Boolean          @default(false)
  hoursPlayed   Int?
  lastPlayed    DateTime?
  addedAt       DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  game          Game?            @relation(fields: [gameId], references: [id], onDelete: Cascade)
  variant       GameVariant?     @relation(fields: [gameVariantId], references: [id], onDelete: Cascade)
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_game_collections")
}

model GameReview {
  id        String   @id @default(cuid())
  userId    String
  gameId    String
  rating    Int
  comment   String?
  graphics  Int?
  sound     Int?
  gameplay  Int?
  story     Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, gameId])
  @@map("game_reviews")
}

model UserCollectionStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  totalConsoles     Int      @default(0)
  totalConsoleValue Float    @default(0)
  rareConsoles      Int      @default(0)
  totalGames        Int      @default(0)
  totalGameValue    Float    @default(0)
  completedGames    Int      @default(0)
  rareGames         Int      @default(0)
  totalItems        Int      @default(0)
  totalValue        Float    @default(0)
  avgCondition      Float?
  lastCalculated    DateTime @default(now())
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_collection_stats")
}

model UserWishlist {
  id               String   @id @default(cuid())
  userId           String
  gameId           String?
  consoleId        String?
  gameVariantId    String?
  consoleVariantId String?
  priority         Int      @default(1)
  maxPrice         Float?
  notes            String?
  createdAt        DateTime @default(now())
  console          Console? @relation(fields: [consoleId], references: [id], onDelete: Cascade)
  game             Game?    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_wishlists")
}

enum Region {
  FR
  EU
  WOR
  JP
  ASI
  US
}

enum ItemCondition {
  SEALED
  MINT
  NEAR_MINT
  VERY_GOOD
  GOOD
  FAIR
  POOR
  LOOSE
  CIB
  BOXED
  MANUAL_ONLY
  CART_ONLY
  DISC_ONLY
}

enum CollectionStatus {
  OWNED
  WANTED
  SOLD
  LOANED
  FOR_SALE
}

// ================================
// NOUVELLES TABLES POUR AM√âLIORATIONS
// ================================

// Table Genre pour stocker tous les genres Screenscraper
model Genre {
  id               String   @id @default(cuid())
  screenscrapeId   Int      @unique  // ID Screenscraper
  name             String   // Nom fran√ßais
  parentId         Int?     // Genre parent (0 = genre principal)
  color            String?  // Couleur pour l'UI
  isMainGenre      Boolean  @default(false) // Genre principal ou sous-genre
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  gameGenres       GameGenre[] @relation("GenreRelation")
  gamesAsPrimary   Game[]      @relation("PrimaryGenre")
  
  @@index([screenscrapeId])
  @@index([parentId])
  @@index([isMainGenre])
  @@map("genres")
}

// Table Corporation pour g√©rer developers/publishers
model Corporation {
  id               String   @id @default(cuid())
  name             String   @unique
  screenscrapeId   Int?     @unique  // ID Screenscraper pour sync
  foundedDate      DateTime?
  defunctDate      DateTime?
  headquarters     String?
  employees        Int?
  website          String?
  description      Json?     // Descriptions multilingues
  fate             String?   // Ce qui est arriv√© √† l'entreprise
  anecdotes        String[]  // Anecdotes sur l'entreprise
  logoUrl          String?   // Logo de l'entreprise
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  roles          CorporationRole[]
  developedGames Game[]    @relation("DeveloperGames")
  publishedGames Game[]    @relation("PublisherGames")
  
  @@index([name])
  @@index([screenscrapeId])
  @@map("corporations")
}

// Table pour les r√¥les des corporations
model CorporationRole {
  id             String      @id @default(cuid())
  corporationId  String
  role           String      // "developer", "publisher", "both"
  startDate      DateTime?
  endDate        DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  
  corporation    Corporation @relation(fields: [corporationId], references: [id], onDelete: Cascade)
  
  @@map("corporation_roles")
}

// Table Generation pour classifier les consoles
model Generation {
  id        String    @id @default(cuid())
  name      String    @unique  // "1√®re g√©n√©ration", "2√®me g√©n√©ration", etc.
  nameEn    String?   // "1st generation", "2nd generation", etc.
  startYear Int?      // Ann√©e de d√©but approximative
  endYear   Int?      // Ann√©e de fin approximative
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  consoles  Console[] @relation("ConsoleGeneration")
  
  @@index([startYear, endYear])
  @@map("generations")
}


// Table Manual pour les manuels de jeux
model Manual {
  id          String    @id @default(cuid())
  gameId      String
  region      Region?
  language    String?   // "FR", "EN", "JP", etc.
  title       String?   // Titre du manuel
  content     String?   // Contenu du manuel (markdown/html)
  pdfUrl      String?   // URL vers le PDF du manuel
  pages       Int?      // Nombre de pages
  fileSize    Int?      // Taille du fichier en octets
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  game        Game      @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@index([language])
  @@map("manuals")
}

// Table Video pour les vid√©os de jeux
model Video {
  id          String   @id @default(cuid())
  gameId      String
  type        String   // "trailer", "gameplay", "longplay", "review"
  title       String?  // Titre de la vid√©o
  url         String   // URL de la vid√©o (YouTube, etc.)
  thumbnailUrl String? // URL de la miniature
  duration    Int?     // Dur√©e en secondes
  quality     String?  // "HD", "4K", etc.
  language    String?  // Langue de la vid√©o
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  game        Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  
  @@index([type])
  @@map("videos")
}

// Table Family pour regrouper les jeux par s√©rie/franchise
model Family {
  id             String   @id @default(cuid())
  name           String   @unique  // "Super Mario", "Final Fantasy", etc.
  nameEn         String?  // Nom en anglais
  screenscrapeId Int?     @unique  // ID Screenscraper pour sync
  description    String?  // Description de la s√©rie
  logoUrl        String?  // Logo de la s√©rie
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  games       Game[]   @relation("GameFamilies")
  
  @@index([screenscrapeId])
  @@map("families")
}

// Nouveau enum pour les langues
enum Language {
  FR
  EN
  JP
  ES
  DE
  IT
  PT
  RU
  KR
  CN
}
