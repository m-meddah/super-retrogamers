#!/usr/bin/env tsx

import { prisma } from "@/lib/prisma"
import { hash } from "bcrypt"

async function createAdmin() {
  try {
    const email = "admin@super-retrogamers.com"
    const password = "SuperRetrogamers" // √Ä changer en production
    const hashedPassword = await hash(password, 12)

    // V√©rifier si un admin existe d√©j√†
    const existingAdmin = await prisma.user.findFirst({
      where: { 
        OR: [
          { email },
          { role: 'admin' }
        ]
      }
    })

    if (existingAdmin) {
      console.log("Un administrateur existe d√©j√†:")
      console.log(`Email: ${existingAdmin.email}`)
      console.log(`R√¥le: ${existingAdmin.role}`)
      return
    }

    // Cr√©er l'administrateur
    const admin = await prisma.user.create({
      data: {
        email,
        name: "Administrateur",
        role: "admin",
      }
    })

    // Cr√©er le compte associ√©
    await prisma.account.create({
      data: {
        accountId: admin.id,
        providerId: "credential",
        userId: admin.id,
        password: hashedPassword,
      }
    })

    console.log("‚úÖ Administrateur cr√©√© avec succ√®s!")
    console.log(`üìß Email: ${admin.email}`)
    console.log(`üîê Mot de passe: ${password}`)
    console.log(`üîë R√¥le: ${admin.role}`)
    console.log("\n‚ö†Ô∏è  IMPORTANT: Changez le mot de passe apr√®s la premi√®re connexion!")

  } catch (error) {
    console.error("‚ùå Erreur lors de la cr√©ation de l'administrateur:", error)
  } finally {
    await prisma.$disconnect()
  }
}

createAdmin()