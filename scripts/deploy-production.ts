#!/usr/bin/env tsx

/**
 * Script de d√©ploiement automatique en production
 * Orchestre toutes les √©tapes n√©cessaires pour lancer le site avec donn√©es prioritaires
 */

import { PrismaClient } from '@prisma/client'
import { readFileSync } from 'fs'
import { join } from 'path'
import { execSync } from 'child_process'

const prisma = new PrismaClient()

// Interface de configuration
interface DeploymentConfig {
  deployment: {
    name: string
    environment: string
    autoCreateAdmin: boolean
    adminEmail: string
    adminName: string
    skipExistingData: boolean
  }
  steps: {
    [key: string]: {
      enabled: boolean
      description: string
    }
  }
  logging: {
    enableDetailedLogs: boolean
    logToFile: boolean
    logFilePath: string
    showProgress: boolean
    showTimestamps: boolean
  }
  errorHandling: {
    continueOnError: boolean
    failOnCriticalError: boolean
    criticalSteps: string[]
  }
  performance: {
    estimatedDurationMinutes: number
  }
}

// √âtat global du d√©ploiement
interface DeploymentState {
  startTime: number
  currentStep: number
  totalSteps: number
  completedSteps: string[]
  failedSteps: string[]
  warnings: string[]
  logs: string[]
}

class DeploymentManager {
  private config: DeploymentConfig
  private state: DeploymentState
  private logFile?: string

  constructor(config: DeploymentConfig) {
    this.config = config
    this.state = {
      startTime: Date.now(),
      currentStep: 0,
      totalSteps: Object.keys(config.steps).filter(step => config.steps[step].enabled).length,
      completedSteps: [],
      failedSteps: [],
      warnings: [],
      logs: []
    }

    if (config.logging.logToFile) {
      this.logFile = join(__dirname, config.logging.logFilePath)
    }
  }

  private log(message: string, type: 'info' | 'success' | 'warning' | 'error' = 'info'): void {
    const timestamp = this.config.logging.showTimestamps 
      ? `[${new Date().toLocaleTimeString('fr-FR')}] ` 
      : ''
    
    const emoji = {
      info: '‚ÑπÔ∏è',
      success: '‚úÖ',
      warning: '‚ö†Ô∏è',
      error: '‚ùå'
    }[type]

    const logMessage = `${timestamp}${emoji} ${message}`
    console.log(logMessage)
    
    this.state.logs.push(logMessage)
    
    if (this.logFile) {
      try {
        require('fs').appendFileSync(this.logFile, logMessage + '\n')
      } catch (error) {
        console.warn('‚ö†Ô∏è Impossible d\'√©crire dans le fichier de log:', error)
      }
    }
  }

  private async executeStep(stepId: string, stepFunction: () => Promise<void>): Promise<boolean> {
    const step = this.config.steps[stepId]
    if (!step || !step.enabled) {
      return true
    }

    this.state.currentStep++
    this.log(`\n${'='.repeat(60)}`)
    this.log(`√âTAPE ${this.state.currentStep}/${this.state.totalSteps}: ${step.description}`)
    this.log(`${'='.repeat(60)}`)

    const stepStart = Date.now()

    try {
      await stepFunction()
      
      const duration = Math.round((Date.now() - stepStart) / 1000)
      this.state.completedSteps.push(stepId)
      this.log(`‚úÖ √âtape ${stepId} termin√©e en ${duration}s`, 'success')
      return true

    } catch (error) {
      const duration = Math.round((Date.now() - stepStart) / 1000)
      this.state.failedSteps.push(stepId)
      this.log(`‚ùå √âchec de l'√©tape ${stepId} apr√®s ${duration}s: ${error}`, 'error')

      const isCritical = this.config.errorHandling.criticalSteps.includes(stepId)
      
      if (isCritical && this.config.errorHandling.failOnCriticalError) {
        throw new Error(`√âtape critique ${stepId} √©chou√©e: ${error}`)
      }
      
      if (!this.config.errorHandling.continueOnError && !isCritical) {
        throw new Error(`√âtape ${stepId} √©chou√©e: ${error}`)
      }
      
      this.log(`‚ö†Ô∏è Continuation malgr√© l'√©chec (√©tape ${isCritical ? 'critique ignor√©e' : 'non critique'})`, 'warning')
      return false
    }
  }

  async deploy(): Promise<void> {
    this.log(`üöÄ D√âBUT DU D√âPLOIEMENT: ${this.config.deployment.name}`)
    this.log(`üéØ Environnement: ${this.config.deployment.environment}`)
    this.log(`‚è±Ô∏è Dur√©e estim√©e: ${this.config.performance.estimatedDurationMinutes} minutes`)
    this.log(`üìÖ D√©marr√© le: ${new Date().toLocaleString('fr-FR')}`)

    try {
      // √âtape 1: V√©rifier les pr√©requis
      await this.executeStep('1_checkPrerequisites', async () => {
        await this.checkPrerequisites()
      })

      // √âtape 2: Cr√©er le compte admin
      await this.executeStep('2_createAdmin', async () => {
        await this.createAdminAccount()
      })

      // √âtape 3: Pr√©parer le rescraping (genres + g√©n√©rations)
      await this.executeStep('3_prepareRescraping', async () => {
        await this.prepareRescraping()
      })

      // √âtape 4: Scraper les consoles prioritaires
      await this.executeStep('4_scrapePriorityConsoles', async () => {
        await this.scrapePriorityData('consoles')
      })

      // √âtape 5: Scraper les jeux prioritaires
      await this.executeStep('5_scrapePriorityGames', async () => {
        await this.scrapePriorityData('games')
      })

      // √âtape 6: G√©n√©rer les statistiques finales
      await this.executeStep('6_generateStats', async () => {
        await this.generateFinalStats()
      })

      // R√©sum√© final
      this.displayFinalSummary()

    } catch (error) {
      this.log(`üí• D√âPLOIEMENT INTERROMPU: ${error}`, 'error')
      this.displayFailureSummary()
      process.exit(1)
    } finally {
      await prisma.$disconnect()
    }
  }

  private async checkPrerequisites(): Promise<void> {
    this.log('üîç V√©rification des pr√©requis...')

    // V√©rifier les variables d'environnement
    const requiredEnvVars = ['DATABASE_URL', 'SCREENSCRAPER_DEV_ID', 'SCREENSCRAPER_DEV_PASSWORD']
    for (const envVar of requiredEnvVars) {
      if (!process.env[envVar]) {
        throw new Error(`Variable d'environnement manquante: ${envVar}`)
      }
    }
    this.log('‚úÖ Variables d\'environnement OK')

    // V√©rifier la connexion √† la base de donn√©es
    try {
      await prisma.$queryRaw`SELECT 1`
      this.log('‚úÖ Connexion base de donn√©es OK')
    } catch (error) {
      throw new Error(`Connexion base de donn√©es √©chou√©e: ${error}`)
    }

    // V√©rifier l'existence des fichiers de configuration
    const configFiles = ['priority-consoles.json', 'priority-games.json', 'deployment.json']
    for (const configFile of configFiles) {
      try {
        readFileSync(join(__dirname, 'config', configFile), 'utf-8')
        this.log(`‚úÖ Fichier ${configFile} trouv√©`)
      } catch (error) {
        throw new Error(`Fichier de configuration manquant: ${configFile}`)
      }
    }

    // V√©rifier la connectivit√© Screenscraper (optionnel)
    this.log('üåê Test de connectivit√© Screenscraper...')
    // Note: Ici on pourrait ajouter un test ping vers l'API Screenscraper
    this.log('‚úÖ Pr√©requis valid√©s')
  }

  private async createAdminAccount(): Promise<void> {
    if (!this.config.deployment.autoCreateAdmin) {
      this.log('‚è≠Ô∏è Cr√©ation du compte admin d√©sactiv√©e')
      return
    }

    this.log(`üë§ Cr√©ation du compte admin: ${this.config.deployment.adminEmail}`)

    try {
      // V√©rifier si l'admin existe d√©j√†
      const existingAdmin = await prisma.user.findUnique({
        where: { email: this.config.deployment.adminEmail }
      })

      if (existingAdmin) {
        if (this.config.deployment.skipExistingData) {
          this.log('‚è≠Ô∏è Compte admin existant, ignor√©')
          return
        } else {
          // Mettre √† jour le r√¥le
          await prisma.user.update({
            where: { email: this.config.deployment.adminEmail },
            data: { role: 'admin' }
          })
          this.log('‚úÖ R√¥le admin mis √† jour')
          return
        }
      }

      // Utiliser le script existant de cr√©ation d'admin
      this.log('üîß Ex√©cution du script create-admin...')
      execSync(`npx tsx scripts/create-admin.ts "${this.config.deployment.adminEmail}" "${this.config.deployment.adminName}"`, {
        cwd: process.cwd(),
        stdio: this.config.logging.enableDetailedLogs ? 'inherit' : 'pipe'
      })
      
      this.log('‚úÖ Compte admin cr√©√© avec succ√®s')

    } catch (error) {
      throw new Error(`Cr√©ation du compte admin √©chou√©e: ${error}`)
    }
  }

  private async prepareRescraping(): Promise<void> {
    this.log('üéØ Pr√©paration du rescraping (genres + g√©n√©rations)...')

    try {
      // Utiliser le script existant de pr√©paration
      this.log('üîß Ex√©cution du script prepare-rescraping...')
      execSync('npx tsx scripts/prepare-rescraping.ts', {
        cwd: process.cwd(),
        stdio: this.config.logging.enableDetailedLogs ? 'inherit' : 'pipe'
      })
      
      // V√©rifier que les genres et g√©n√©rations sont bien pr√©sents
      const [genreCount, generationCount] = await Promise.all([
        prisma.genre.count(),
        prisma.generation.count()
      ])

      if (genreCount === 0) {
        throw new Error('Aucun genre synchronis√© apr√®s la pr√©paration')
      }
      if (generationCount === 0) {
        this.log('‚ö†Ô∏è Aucune g√©n√©ration trouv√©e apr√®s la pr√©paration', 'warning')
      }

      this.log(`‚úÖ Pr√©paration termin√©e: ${genreCount} genres, ${generationCount} g√©n√©rations`)

    } catch (error) {
      throw new Error(`Pr√©paration du rescraping √©chou√©e: ${error}`)
    }
  }

  private async scrapePriorityData(type: 'consoles' | 'games'): Promise<void> {
    const emoji = type === 'consoles' ? 'üéÆ' : 'üéØ'
    const label = type === 'consoles' ? 'consoles' : 'jeux'
    
    this.log(`${emoji} Scraping des ${label} prioritaires...`)

    try {
      // Utiliser le script de scraping prioritaire
      this.log('üîß Ex√©cution du script scrape-priority-data...')
      execSync('npx tsx scripts/scrape-priority-data.ts', {
        cwd: process.cwd(),
        stdio: this.config.logging.enableDetailedLogs ? 'inherit' : 'pipe'
      })
      
      this.log(`‚úÖ Scraping des ${label} prioritaires termin√©`)

    } catch (error) {
      // Ne pas faire √©chouer le d√©ploiement si seul le scraping √©choue
      this.log(`‚ö†Ô∏è Scraping des ${label} partiellement √©chou√©: ${error}`, 'warning')
      this.state.warnings.push(`Scraping ${label} partiellement √©chou√©`)
    }
  }

  private async generateFinalStats(): Promise<void> {
    this.log('üìä G√©n√©ration des statistiques finales...')

    try {
      const [
        totalConsoles, totalGames, totalFamilies, totalCorps,
        totalGenres, totalGenerations, totalCache
      ] = await Promise.all([
        prisma.console.count(),
        prisma.game.count(),
        prisma.family.count(),
        prisma.corporation.count(),
        prisma.genre.count(),
        prisma.generation.count(),
        prisma.mediaUrlCache.count()
      ])

      this.log('\nüìà CONTENU DE LA BASE DE DONN√âES:')
      this.log(`   üéÆ Consoles: ${totalConsoles}`)
      this.log(`   üéØ Jeux: ${totalGames}`)
      this.log(`   üë• Familles: ${totalFamilies}`)
      this.log(`   üè¢ Corporations: ${totalCorps}`)
      this.log(`   üè∑Ô∏è Genres: ${totalGenres}`)
      this.log(`   üìÖ G√©n√©rations: ${totalGenerations}`)
      this.log(`   üíæ Cache m√©dia: ${totalCache} entr√©es`)

      // V√©rifications de coh√©rence
      if (totalConsoles === 0) {
        this.log('‚ö†Ô∏è Aucune console dans la base', 'warning')
      }
      if (totalGames === 0) {
        this.log('‚ö†Ô∏è Aucun jeu dans la base', 'warning')
      }
      if (totalGenres === 0) {
        throw new Error('CRITIQUE: Aucun genre dans la base')
      }

      this.log('‚úÖ Statistiques g√©n√©r√©es')

    } catch (error) {
      throw new Error(`G√©n√©ration des statistiques √©chou√©e: ${error}`)
    }
  }

  private displayFinalSummary(): void {
    const duration = Math.round((Date.now() - this.state.startTime) / 1000 / 60 * 100) / 100
    
    this.log('\nüéâ ================================================================')
    this.log('üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS!')
    this.log('üéâ ================================================================')
    
    this.log(`\nüìä R√âSUM√â:`)
    this.log(`   ‚è±Ô∏è Dur√©e totale: ${duration} minutes`)
    this.log(`   ‚úÖ √âtapes r√©ussies: ${this.state.completedSteps.length}/${this.state.totalSteps}`)
    this.log(`   ‚ùå √âtapes √©chou√©es: ${this.state.failedSteps.length}`)
    this.log(`   ‚ö†Ô∏è Avertissements: ${this.state.warnings.length}`)

    if (this.state.warnings.length > 0) {
      this.log(`\n‚ö†Ô∏è AVERTISSEMENTS:`)
      this.state.warnings.forEach(warning => this.log(`   - ${warning}`, 'warning'))
    }

    this.log(`\nüöÄ LE SITE EST PR√äT POUR LA PRODUCTION!`)
    this.log(`   üåê Les donn√©es prioritaires ont √©t√© scrap√©es`)
    this.log(`   üë§ Le compte admin est cr√©√©`)
    this.log(`   üíæ La base de donn√©es est initialis√©e`)
    
    if (this.logFile) {
      this.log(`\nüìù Logs d√©taill√©s sauvegard√©s dans: ${this.logFile}`)
    }
  }

  private displayFailureSummary(): void {
    const duration = Math.round((Date.now() - this.state.startTime) / 1000 / 60 * 100) / 100
    
    this.log('\nüí• ================================================================')
    this.log('üí• D√âPLOIEMENT √âCHOU√â')
    this.log('üí• ================================================================')
    
    this.log(`\nüìä R√âSUM√â:`)
    this.log(`   ‚è±Ô∏è Dur√©e: ${duration} minutes`)
    this.log(`   ‚úÖ √âtapes r√©ussies: ${this.state.completedSteps.length}`)
    this.log(`   ‚ùå √âtapes √©chou√©es: ${this.state.failedSteps.length}`)

    if (this.state.failedSteps.length > 0) {
      this.log(`\n‚ùå √âTAPES √âCHOU√âES:`)
      this.state.failedSteps.forEach(step => this.log(`   - ${step}`, 'error'))
    }

    this.log(`\nüîß ACTIONS RECOMMAND√âES:`)
    this.log(`   1. V√©rifiez les logs ci-dessus pour identifier le probl√®me`)
    this.log(`   2. Corrigez les erreurs identifi√©es`)
    this.log(`   3. Relancez le d√©ploiement: npx tsx scripts/deploy-production.ts`)
    
    if (this.logFile) {
      this.log(`\nüìù Logs d√©taill√©s sauvegard√©s dans: ${this.logFile}`)
    }
  }
}

async function main(): Promise<void> {
  let config: DeploymentConfig

  try {
    // Charger la configuration
    const configPath = join(__dirname, 'config', 'deployment.json')
    const configContent = readFileSync(configPath, 'utf-8')
    config = JSON.parse(configContent)
  } catch (error) {
    console.error('üí• ERREUR: Impossible de charger deployment.json:', error)
    console.error('   Assurez-vous que le fichier existe dans scripts/config/')
    process.exit(1)
  }

  // Cr√©er et lancer le gestionnaire de d√©ploiement
  const manager = new DeploymentManager(config)
  await manager.deploy()
}

// Gestion des signaux pour arr√™t propre
process.on('SIGINT', async () => {
  console.log('\n‚èπÔ∏è Arr√™t demand√©, nettoyage...')
  await prisma.$disconnect()
  process.exit(0)
})

// Ex√©cution du script
if (require.main === module) {
  main()
}

export { main as deployProduction }