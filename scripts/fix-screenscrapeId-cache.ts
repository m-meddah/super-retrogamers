import { prisma } from '@/lib/prisma'

async function fixScreenscrapeIdInCache() {
  console.log('üîß Correction des screenscrapeId null dans media_url_cache...\n')

  // Trouver toutes les entr√©es de cache console avec screenscrapeId null
  const nullEntries = await prisma.mediaUrlCache.findMany({
    where: {
      entityType: 'console',
      screenscrapeId: null
    },
    select: {
      id: true,
      entityId: true,
      mediaType: true,
      region: true,
      url: true
    }
  })

  console.log(`üìä Entr√©es avec screenscrapeId NULL √† corriger: ${nullEntries.length}`)

  let corrected = 0

  // Grouper par console pour √©viter les requ√™tes r√©p√©t√©es
  const entriesByConsole = new Map<string, typeof nullEntries>()
  
  for (const entry of nullEntries) {
    if (!entriesByConsole.has(entry.entityId)) {
      entriesByConsole.set(entry.entityId, [])
    }
    entriesByConsole.get(entry.entityId)!.push(entry)
  }

  console.log(`üéÆ Consoles affect√©es: ${entriesByConsole.size}`)

  // Corriger chaque console
  for (const [consoleId, entries] of entriesByConsole) {
    // R√©cup√©rer le ssConsoleId de cette console
    const consoleData = await prisma.console.findUnique({
      where: { id: consoleId },
      select: { name: true, ssConsoleId: true }
    })

    if (!consoleData) {
      console.log(`‚ö†Ô∏è  Console ${consoleId} introuvable`)
      continue
    }

    if (!consoleData.ssConsoleId) {
      console.log(`‚ö†Ô∏è  Console ${consoleData.name} n'a pas de ssConsoleId`)
      continue
    }

    console.log(`üîÑ Correction de ${consoleData.name} (${entries.length} entr√©es) -> ssConsoleId: ${consoleData.ssConsoleId}`)

    // Mettre √† jour toutes les entr√©es de cette console
    for (const entry of entries) {
      await prisma.mediaUrlCache.update({
        where: { id: entry.id },
        data: { screenscrapeId: consoleData.ssConsoleId }
      })
      corrected++
    }
  }

  console.log(`\n‚úÖ Correction termin√©e: ${corrected} entr√©es mises √† jour`)

  // V√©rification
  const remainingNull = await prisma.mediaUrlCache.count({
    where: {
      entityType: 'console',
      screenscrapeId: null
    }
  })

  console.log(`üìä Entr√©es console avec screenscrapeId NULL restantes: ${remainingNull}`)

  // Faire de m√™me pour les jeux si n√©cessaire
  const gameNullEntries = await prisma.mediaUrlCache.count({
    where: {
      entityType: 'game',
      screenscrapeId: null
    }
  })

  if (gameNullEntries > 0) {
    console.log(`‚ö†Ô∏è  Il reste ${gameNullEntries} entr√©es jeu avec screenscrapeId NULL`)
    console.log('   (Les jeux n√©cessitent une logique diff√©rente - pas impl√©ment√©e pour l\'instant)')
  }
}

async function main() {
  try {
    await fixScreenscrapeIdInCache()
  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

main()